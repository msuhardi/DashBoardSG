<%- include("partials/header.ejs") %>

<script>
    let nearestRegion, nearestArea;
    let pm25Value, pm25Json;
    let psiValue, psiJson;
    let uviValue, uviJson;
    let weatherValue, weatherJson;

    const currentDateAndTime = new Date();

    // Get date and time components
    const year = currentDateAndTime.getFullYear();
    const month = currentDateAndTime.getMonth() + 1; // Note: Month is zero-based, so we add 1
    const day = currentDateAndTime.getDate();
    const hours = currentDateAndTime.getHours();
    const minutes = currentDateAndTime.getMinutes();
    const seconds = currentDateAndTime.getSeconds();

    const pm25api = 'https://api.data.gov.sg/v1/environment/pm25?date_time=${year}-${month}-${day}T${hours}:${minutes}:${seconds}';
    const psiApi = "https://api.data.gov.sg/v1/environment/psi?date_time=${year}-${month}-${day}T${hours}:${minutes}:${seconds}"
    const uviApi = "https://api.data.gov.sg/v1/environment/uv-index?date_time=${year}-${month}-${day}T${hours}:${minutes}:${seconds}"
    const weatherApi = "https://api.data.gov.sg/v1/environment/2-hour-weather-forecast?date_time=${year}-${month}-${day}T${hours}:${minutes}:${seconds}"

    let userLatitude = 1.316576119456869;
    let userLongitude = 103.83240698999445;

    // if (navigator.geolocation) {
    //     navigator.geolocation.getCurrentPosition(function(position) {
    //         userLatitude = position.coords.latitude;
    //         userLongitude = position.coords.longitude;
    //         console.log(`Latitude: ${userLatitude}, Longitude: ${userLongitude}`);

    //         // Call fetchData here to make the API call after getting the user's location
            fetchPM25Data();
            document.getElementById('pm25Info').innerHTML = `Current latitude: ${userLatitude}, Current longitude: ${userLongitude}, Region: ${nearestRegion}, pm25Value: ${pm25Value}`;
    //     });
    // } else {
    //     console.log("Geolocation is not supported by this browser.");
    // }
    
    function getNearestRegion(latitude, longitude, locationMetaData) {
        const regions = locationMetaData;
        nearestRegion = regions[0];
        let minDistance = calculateDistance(latitude, longitude, nearestRegion.label_location.latitude, nearestRegion.label_location.longitude);

        // Loop through each region and update nearestRegion if a closer one is found
        for (let i = 1; i < regions.length; i++) {
            const distance = calculateDistance(latitude, longitude, regions[i].label_location.latitude, regions[i].label_location.longitude);
            if (distance < minDistance) {
                minDistance = distance;
                nearestRegion = regions[i];
            }
        }
        return nearestRegion;
    }
    
    // Function to calculate distance using Haversine formula
    function calculateDistance(lat1, lon1, lat2, lon2) {
        const R = 6371; // Earth radius in kilometers
        const dLat = (lat2 - lat1) * (Math.PI / 180);
        const dLon = (lon2 - lon1) * (Math.PI / 180);
        const a =
            Math.sin(dLat / 2) * Math.sin(dLat / 2) +
            Math.cos(lat1 * (Math.PI / 180)) * Math.cos(lat2 * (Math.PI / 180)) *
            Math.sin(dLon / 2) * Math.sin(dLon / 2);
        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
        const distance = R * c; // Distance in kilometers
        return distance;
    }

    function fetchPM25Data() {
        fetch(pm25api)
            .then(response => response.json())
            .then(data => {
            pm25Json = data; // Set the global pm25Json variable
            nearestRegion = getNearestRegion(userLatitude, userLongitude, pm25Json.region_metadata);
            pm25Value = pm25Json.items[0].readings.pm25_one_hourly[nearestRegion.name];
            console.log('PM2.5 Value:', pm25Value);
            })
            .catch(error => console.error('Error fetching PM2.5 data:', error));
    }

    function fetchPsiData() {
        fetch(psiApi)
            .then(response => response.json())
            .then(data => {
            psiJson = data; // Set the global psiJson variable
            nearestRegion = getNearestRegion(userLatitude, userLongitude, psiJson.region_metadata);
            psiValue = psiJson.items[0].readings.psi_twenty_four_hourly[nearestRegion];;
            console.log('PSI Value:', psiValue);
            })
            .catch(error => console.error('Error fetching PSI data:', error));
    }

    function fetchUviData() {
        fetch(uviApi)
            .then(response => response.json())
            .then(data => {
            uviJson = data; // Set the global uviJson variable
            uviValue = uviJson.items[0].index[0].value;
            console.log('UVI Value:', uviValue);
            })
            .catch(error => console.error('Error fetching UVI data:', error));
    }

    function fetchWeatherData() {
        fetch(weatherApi)
            .then(response => response.json())
            .then(data => {
            weatherJson = data; // Set the global uviJson variable
            nearestArea = getNearestRegion(userLatitude, userLongitude, weatherJson.area_metadata);
            weatherValue = weatherJson.items[0].forecasts.find(area => area.area === nearestArea.name).forecast;

            console.log('Weather Value:', weatherValue);
            })
            .catch(error => console.error('Error fetching Weather data:', error));
    }

</script>

<body>
    <h1>DashBoardSG</h1>

    <% if (selectedDash["PM25"]) { %>
        <p>PM2.5 is selected</p>
        <!-- Display latitude and longitude here if needed -->
        <p id="pm25Info"></p>
    <% } %>

    <% if (selectedDash["PSI"]) { %>
        <p>PSI is selected</p>
    <% } %>

    <% if (selectedDash["UVI"]) { %>
        <p>UVI is selected</p>
    <% } %>

    <% if (selectedDash["Weather"]) { %>
        <p>Weather is selected</p>
    <% } %>
</body>

<%- include("partials/footer.ejs") %>
